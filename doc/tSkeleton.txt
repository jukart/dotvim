*tSkeleton.txt*              tSkeleton -- File Templates and Code Skeletons

Author: Thomas Link, samul AT web.de

tSkeleton provides file templates and code skeletons (snippets). These 
templates may contain special tags that are replaced with some computed 
value (e.g., variables, user input ...), vimscript code, or place 
holders/jump positions (see |tSkeleton-jump-positions|).


-----------------------------------------------------------------------
                                                    *tSkeleton-install*
Install~

Edit the vba file and type:

    :so %

See :help vimball for details.

If you don't already have some skeletons, you may want to download 
tSkeleton-Samples.zip from:

    http://www.vim.org/scripts/script.php?script_id=1160

Extract zip (or copy the contained files) to your local vimfiles 
directory (see also |add-global-plugin|). The directory structure should 
look like this:

    ~/.vim/skeletons/
        FILE TEMPLATES ...
        map/
            MAP FILES FOR CONDITIONAL EXPANSION
        bits/
            &filetype.txt (single line templates)
            general/
                GENERAL CODE SKELETONS ...
            &filetype/
                FILETYPE SPECIFIC CODE SKELETONS: ONE SKELETON PER FILE ...

                                                    *g:tskelDir*
If you re-use skeletons from version 1.0 with a later version, you have 
to update the |tSkeleton-place-holder| markup. Make sure the variable 
g:tskelDir points to the right directory.

You might want to use imaps.vim's (vimscript #244 or vimscript #475) place 
holders in conjunction with template bits.

If you don't use imaps.vim, you can use |TSkeletonMapGoToNextTag()|.


-----------------------------------------------------------------------
                                                    *tSkeleton-usage*
File templates~

The file skeletons are stored in the skeletons subdirectory. Which 
template is used for which new file is controlled by |:autocmd|s. This 
provides greater flexibility than a &filetype based approach as you can 
select templates on the basis of a filename pattern or a specific 
directory.

Currently, the following file types are supported by default:

   - batch.bat
   - deplate.txt
   - latex.tex
   - php.inc.php
   - php.php
   - plugin.vim
   - ruby.rb
   - shell.sh
   - text.txt

In order to add support for a new filetype, save a skeleton file to 
~/.vim/skeletons/file.suffix and add something like this to your .vimrc 
file: >

    autocmd BufNewFile *.suffix       TSkeletonSetup template.suffix
    autocmd BufNewFile /here/*.suffix TSkeletonSetup othertemplate.suffix

                                                    *tSkeleton-place-holder*
You can use tags to define cursor jump positions. tSkeleton also 
supports some special tags that are expanded when inserting the 
skeleton.

A list of special tags:>

    <+FILE NAME ROOT+> :: the file name root
    <+FILE NAME+>      :: the file name
    <+FILE SUFFIX+>    :: the file suffix
    <+FILE DIRNAME+>   :: the file's directory
    <+NOTE+>           :: a note
    <+DATE+>           :: the current date (the format is controlled via 
                          g:tskelDateFormat)
    <+AUTHOR+>         :: the author's name (g:tskelUserName)
    <+EMAIL+>          :: the author's e-mail (g:tskelUserEmail)
    <+WEBSITE+>        :: the author's homepage (g:tskelUserWWW)
    <+LICENSE+>        :: the name of the license this file is released 
                          under (g:tskelLicense)

In order to define your own tag, you have to define a function called 
TSkeleton_TAGNAME() that returns the text to be filled in.

tSkeleton also supports the following pseudo-tags:

    <+CURSOR+>         :: where to place the cursor after insertion
    <+&NAME+>          :: a vim option
    <+g:NAME+>         :: a global variable
    <+b:NAME+>         :: a buffer local variable
    <+?QUERY?+>        :: query the user[1]
    <+?VAR|QUERY?+>    :: query the user and propose some choices from 
                          the variable ${VAR}[1]
    <+bit:BIT>, <+bit:BIT|"DEFAULT">, <+bit:BIT|COMMANDS> :: insert a 
                          bit; if the bit isn't defined for the current 
                          filetype, use DEFAULT; if DEFAULT matches ".*" 
                          insert it as a string; otherwise interpret it 
                          as a command sequence to be fed to normal
    <+tskel:TSKELETON> ... :: same as the above
    <+call:FUNCTION(ARGS)+> :: insert the result value of some function

[1] If the query ends with a colon, the second question mark will be 
removed. Up to verson 2.4 VAR is a string, separating the items by an 
"\n". From 3.0 on, VAR is a list.

                                                    *tSkeleton-jump-positions*
Unknown tags are kept in the expanded skeleton. These tags can be used 
as cursor jump marks. This syntax was originally used by imap (vimscript 
#244 or vimscript #475). If you don't want to install imap, you can also  
use |TSkeletonMapGoToNextTag()|.

Nameless tags (<++>) will disappear when they are selected.

Example:>

    case <+CURSOR+> in
    <+PATTERN+>)
        <+BODY+>
        ;;
    *)
        <+DEFAULT+>
        ;;
    esac
    <++>

When you insert this skeleton, the cursor will be placed at 
"<+CURSOR+>".  If you press <c-j>, the cursor will jump to "<+PATTERN+>" 
(the tag will remain selected). If you press <c-j> three times, the 
cursor will jump to "<++>" (the tag will be deleted).

Check out the "test_tSkeleton" skeleton for examples.


                                                    *tSkeleton-modifiers*
Tags can be modified using modifiers, like in: >

    <+TAG NAME:MODIFIER+>

Known modifiers:

    l          :: lower case
    u          :: upper case
    c          :: capitalize
    C          :: transform to CamelCase
    s/FROM/TO/ :: replace text (actually a s//g); this has to be the 
                  last modifier; the pattern separator can be selected 
                  arbitrarily

Example for a ruby class template: >

    class <+FILE NAME ROOT:cs*\W*_*+>
        <+CURSOR+>
    end
    <++>

-----------------------------------------------------------------------
                                                    *tSkeleton-code-skeletons*
                                                    *tSkeleton-bits*
Bits/Code Skeletons~

Smaller skeleton bits are stored in SKELETONS/bits/FILETYPE/ or 
SKELETONS/bits/general/. I.e., code skeletons can be filetype specific 
or generally available.

Skeleton bits can be filled in by typing: >

    :TSkeletonBit NAME

For this command, command line completion is implemented. Calling this 
command will insert the contents of the respective file below the 
current line.

NOTE: Bit names should not contain ampersand (as these are interpreted 
as menu accelerators) and periods (which are used to construct 
submenus). Other special characters can be included by encoding them in 
hex form as %XX as it is done in URLs.  Example: "%5Csection" becomes 
"\section".

                                                    *tSkeleton-key-bindings*
The default key bindings for inserting code skeletons are:

    <Leader>## ... Expand name under cursor
    <Leader>#t ... Insert code skeleton via command line
    <c-\><c-\> ... In insert mode, expand the bit before the cursor (on 
                   a German keyboard this happens to be <c-#><c-#>)

                                                    *g:tskelKeyword_{&filetype}*
A bit name usually is the |word| under the cursor. If this doesn't fit 
your needs, you can define g:tskelKeyword_{&filetype} to define what 
makes up a skeleton name. Example: >

    let g:tskelKeyword_viki = '\(#\|{\)\?[^#{[:blank:]]\{-}'


                                                    *tSkeleton-embedded-code*
Code skeletons may contain vim code that is evaluated before or after 
expanding the tags. The before/after blocks are fed to |:exec| and must 
not contain function definitions.

                                                    *<tskel:msg>* *<tskel:before>* *<tskel:after>*
                                                    *<tskel:here_before>* *<tskel:here_after>*
These special regions must appear in the following order:
        <tskel:msg>
            Display an explanatory message after template expansion
        <tskel:before>
            Execute code before template expansion in the target buffer
        <tskel:after>
            Execute code after template expansion in the target buffer
        <tskel:here_before>
            Execute code before template expansion in the template buffer
        <tskel:here_after>
            Execute code after template expansion in the template buffer

BibTeX example: >

    <tskel:msg>
        Insert a collection entry
    </tskel:msg>
    <tskel:before>
        let b:tskelArticleID = input("ID of bibentry: ")
        if b:tskelArticleID == "" | let b:tskelArticleID = "<+CURSOR+>" | endif
    </tskel:before>
    <tskel:after>
        unlet b:tskelArticleID
    </tskel:after>
    @INCOLLECTION{<+b:tskelArticleID+>,
        author   = {<+CURSOR+>},
        title    = {<+ARTICLE TITLE+>},
        crossref = {<+CROSSREF+>},
        pages    = {<+PAGES+>},
        abstract = {[[~/Docs/Abstracts/<+b:tskelArticleID+>.txt]]},
    }
    <++>

In the above example, we query the user for an ID and insert this ID as 
entry key and as an abstract's file name.

The before/after blocks are evaluated in the destination buffer. The 
variants here_before/here_after are evaluated in the scratch buffer for 
the current code skeleton.

                                                    *tSkeleton-groups*
                                                    *g:tskelBitGroup_{&filetype}*
Groups~

Some filetype's bits might be of use for other filetypes too. You can 
make them accessible by defining a g:tskelBitGroup_{&filetype} variable. 
E.g., in php mode all html bits are made accessible by setting this 
variable (the default): >

    let g:tskelBitGroup_php = ['php', 'html']

Bits of type "general" are always available.

                                                    *tSkeleton-context*
                                                    *tSkeleton-map*
Maps -- Context-sensitive expansion~

To some extent, tSkeleton is capable of offering the user only a small 
selection of eligible bits for a specific context if a map file 
($VIMFILES/skeletons/map/{&filetype}) is provided. Such a map file is made up 
of regular expressions matching a specific context (before the cursor 
only) and a blank-separated list of eligible bits. The regexp and the 
list are separated by whitespace: >

    REGEXP  BIT1 BIT2 ... BITn

Example: >

    <form\\([^>]\\|\\n\\)*	name= action= method=

If an eligible bit is undefined, the name is inserted as is. I.e. you 
don't have to define skeletons for all these options and argument names.


                                                    *tSkeleton-minibits*
Minibits~

Mini bits are kept in the files:

    - $CWD/.tskelmini
    - $VIMFILES/skeletons/bits/{&filetype}.txt

These files contain whitespace-separated pairs of bit names and their 
expansions. These files are meant to keep expansions of accronyms and 
abbreviations and the like. Example: >

    IMHO    In my humble opinion
    AFAIK   As far as I know

                                                    *tSkeleton-menu*
                                                    *g:tskelMenuPrefix*
Menu~

If g:tskelMenuPrefix is non-empty, tSkeleton will display a menu 
containing all eligible bits for a certain filetype.

The menu can be hierarchical and certain entries may have shortcuts by 
properly naming the bits. Example: >

    &Environment.&Quote
    &Environment.Q&uotation

This will create the submenu "Environment" that can be selected by 
typing "e" (on Windows) and two entries, the first of which can be 
selected by typing "q" and the second by typing "u".

Be aware that the actual bit names are Quote and Quotation (i.e. the 
submenu and the ampersand are stripped off).


                                                    *g:tskelMapComplete*
Insert-mode completion~

If g:tskelMapComplete is true, 'completefunc' is set to 
TSkeleton_complete so that the user will be presented with a selection 
of elegible skeletons when pressing |i_CTRL-X_CTRL-U|.


-----------------------------------------------------------------------
                                                    *tSkeleton-commands*
Commands~
                                                    *:TSkeletonNewFile*
:TSkeletonNewFile ?template, ?destDir, ?destFileName

                                                    *:TSkeletonEdit*
:TSkeletonEdit ?skelDir

                                                    *:TSkeletonBit*
:TSkeletonBit NAME


-----------------------------------------------------------------------
                                                    *tSkeleton-utilities*
Utilities~

                                                    *TSkeletonIncreaseRevisionNumber()*
The function TSkeletonIncreaseRevisionNumber() provides a way to 
automatically update a revision number in the form >

    @Revision: 1.0.211

In order to use this function, add something like this to your |vimrc| 
file: >

    autocmd BufWritePre * call TSkeletonIncreaseRevisionNumber()

                                                    *:TSkeletonCleanUpBibEntry*
The TSkeletonCleanUpBibEntry command can be used to purge the current bibtex 
entry from expendable fields (i.e., lines matching <+.\{-}+>).

For bibtex files, this command is bound to: <Leader>tc

                                                    *TSkeletonMapGoToNextTag()*
                                                    *TSkeletonGoToNextTag()*
If you don't want to install imaps.vim, this function will map <c-j> to 
TSkeletonGoToNextTag() in order to easily jump between tags.

You can insert >

    call TSkeletonMapGoToNextTag()

in after/plugin/tSkeleton.vim to map TSkeletonGoToNextTag() to <c-j> 
similar to imap.vim.

This will map <c-j> to TSkeletonGoToNextTag() that makes the cursor jump 
to the next tag.

